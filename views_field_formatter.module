<?php

/**
 * Implements hook_field_formatter_info().
 */
function views_field_formatter_field_formatter_info() {
  $info = field_info_field_types();

  $formatters = array(
    'views_field_formatter' => array(
      'label' => t('View'),
      'field types' => array_keys($info),
      'settings' => array(
        'view' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function views_field_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $field_id = $field['field_name'];
  $field_instances = field_info_instances();

  $enabled_entities = array();
  foreach($field_instances as $entity => $bundles) {
    foreach($bundles as $bundle => $bundle_data) {
      if (isset($field_instances[$entity][$bundle][$field_id])) {
        $enabled_entities[$entity] = $entity;
      }
    }
  };

  $views = views_get_all_views();
  $options1 = array();
  foreach ($views as $view => $data) {
    // If editing a field from a Views, remove the current view from the list.
    if (isset($form_state['view']) && $form_state['view']->name == $view) {
      continue;
    }

    // Remove Views who doesn't have the tag 'views_field_formatter'.
    $tags = explode(',', $data->tag);
    if (!in_array('views_field_formatter', $tags)) {
      continue;
    }

    // Remove disabled views.
    if ($data->disabled == TRUE) {
      continue;
    }

    if (in_array($data->base_table, $enabled_entities)) {
      foreach ($data->display as $display => $display_data) {
        $options1[$data->human_name][$view . '::' . $display] = $display;
      }
    }
  }

  if (!empty($options1)) {
    $element['view'] = array(
      '#title' => t('View'),
      '#description' => t('Select the view (<em><a href="@add_view_url">or create a new one</a></em>) that will be used to get the value of the field. Only views with tag <em>views_field_formatter</em> will be visible.', array('@add_view_url' => url('admin/structure/views/add'))),
      '#type' => 'select',
      '#default_value' => $settings['view'],
      '#options' => $options1,
    );
  } else {
    $element['help'] = array(
      '#markup' => t('<p>No available Views were found. <a href="@add_view_url">Create</a> or <a href="@enable_views_url">enable</a> a views with tag <em>views_field_formatter</em>.</p>', array('@add_view_url' => url('admin/structure/views/add'), '@enable_views_url' => url('admin/structure/views')))
    );
  }


  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function views_field_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  list($view, $view_display) = explode('::', $settings['view']);

  if ($display['type'] == 'views_field_formatter') {
    if (isset($settings['view'])) {
      $summary[] = t('View: @view', array('@view' => $view));
      $summary[] = t('Display: @display', array('@display' => $view_display));
    }
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function views_field_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  list($view, $view_display) = explode('::', $settings['view']);

  $entity_info = entity_get_info($entity_type);
  $key = $entity_info['entity keys']['id'];

  if ($display['type'] == 'views_field_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => views_embed_view($view, $view_display, $item['value'], $delta)
      );
    }
  }

  return $element;
}

/**
 * Implements hook_views_api().
 */
function views_field_formatter_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_field_formatter') . '/views',
  );
}
